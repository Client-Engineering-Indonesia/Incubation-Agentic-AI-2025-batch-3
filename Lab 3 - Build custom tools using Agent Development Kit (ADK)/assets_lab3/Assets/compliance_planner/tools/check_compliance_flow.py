# from ibm_watsonx_orchestrate.flow_builder.flows import (
#     Flow, flow, START, END, Branch
# )
# from pydantic import BaseModel, Field
# from typing import List
# # --- 1. Data Model Definitions (Input/Output for each Agent) ---
# class FlowInput(BaseModel):
#     """Initial input from the user to start the flow."""
#     query: str = Field(description="User query")
# class FlowOutput(BaseModel):
#     """Final output to be provided to the user."""
#     compliance_summary: str = Field(description="A summary of the compliance check results in easy-to-understand language.")
# class CompliancePlan(BaseModel):
#     """Output from the planner agent: a list of mandatory documents."""
#     plan: str = Field(description="A string containing a checklist of all documents required for compliance.")
# class DocumentContent(BaseModel):
#     """Output from the retriever agent: data/documents that were successfully found."""
#     documents: str = Field(description="All data and text from the documents found by tool calling.")
# class ComplianceCheckInput(BaseModel):
#     """Combined input required by the checker agent."""
#     plan: str = Field(description="The checklist of mandatory documents.")
#     documents: str = Field(description="The documents that were successfully found.")
#     shipment_id: str = Field(description="The ID of the shipment being checked.")
# class ComplianceCheckResult(BaseModel):
#     """Structured output from the checker agent."""
#     is_compliant: bool = Field(description="Returns 'true' if all documents are complete, otherwise 'false'.")
#     missing_documents: List[str] = Field(description="A list of mandatory documents that were not found.")
#     status_summary: str = Field(description="A technical summary of the compliance status.")
# # --- 2. Main Flow Definition ---
# @flow(
#     name="check_compliance_flow_Bisma",
#     input_schema=FlowInput,
#     output_schema=FlowOutput
# )
# def check_compliance_flow(aflow: Flow) -> Flow:
#     """
#     Flow ini mengorkestrasi beberapa agen untuk melakukan pemeriksaan kepatuhan dokumen ekspor secara lengkap.
#     """
#     # Deskripsi Alur Kerja:
#     # 1. Agen Planner: Menghasilkan checklist dokumen standar yang wajib ada.
#     # 2. Agen Retriever: Mengambil semua data dokumen yang ada untuk shipment_id yang diberikan.
#     # 3. Agen Checker: Membandingkan data yang ada dengan checklist, lalu memberikan hasil terstruktur.
#     # 4. Agen Summarizer: Mengambil hasil terstruktur dan membuat ringkasan akhir untuk pengguna.
#     #
#     # Catatan: Logika iterasi (perulangan) untuk mengambil data yang hilang akan diatur
#     # di dalam 'instructions' agen orkestrator utama yang memanggil flow ini.
#     # Flow ini merepresentasikan satu siklus pengecekan.
#     # --- 3. Definisi Panggilan ke Setiap Agen ---
#     # Agen untuk membuat rencana/checklist kepatuhan
#     get_compliance_plan_agent = aflow.agent(
#         name="Compliance_Plan_Generator_Agent",
#         agent="Compliance_Plan_Generator_Agent", # Nama agen yang didefinisikan di file .yaml
#         description="A specialized agent that provides a procedure to check compliance.",
#         message="Generate procedure or step by step process to ensure that statement given by user is comply with the requirement or existing policy. Provide required documents and what contents that needed to perform compliance assessment. Output this list clearly. Do not add any other information or perform any other tasks.",
#         output_schema=CompliancePlan,
#     )
#     # Agen untuk mengambil data dari sistem berdasarkan ID pengiriman
#     retrieve_shipment_data_agent = aflow.agent(
#         name="AgentContract_RD_9820Yw",
#         agent="AgentContract_RD_9820Yw",
#         description="""This agent answers questions about whether specific clauses, terms,
#         or whole contracts comply with internal policy, industry standards, and relevant
#         regulations.
#         """,
#         message="""You will search required documents or its contents based on procedure generated by previous agent""",
#         input_schema=CompliancePlan,
#         output_schema=DocumentContent,
#     )
#     # Agen untuk melakukan pengecekan (membandingkan rencana dengan data)
#     check_compliance_agent = aflow.agent(
#         name="compliance_Checker_Agent",
#         agent="compliance_Checker_Agent",
#         description="A specialized agent that checks all references needed to perform compliance assessment.",
#         message="""You will be given with procedure and references.
#         Your task is to answer with Complete or Incomplete based on procedure and reference given.
#         ## Example:
#         ### You are given with this procedure:
#         - Check certificate of origin
#         - Check if certificate of origin stating Bank Name, and Bank Address
#         ### References:
#         - Certificate of Analysis
#         ### Answer: Incomplete, because certificate of origin is missing.""",
#         input_schema=ComplianceCheckInput,
#         output_schema=ComplianceCheckResult,
#     )
#     # Agen terakhir untuk membuat ringkasan akhir bagi pengguna
#     summarize_result_agent = aflow.agent(
#         name="compliance_Finish_Agent",
#         agent="compliance_Finish_Agent", # Bisa menggunakan agen utama sebagai 'summarizer' cerdas
#         description="A compliance assistant tasked with providing a final compliance assessment based on the provided compliance plan and available documents.",
#         message="""Create a clear and positive summary message. The message must:
#                     - State clearly that the Document has successfully passed the compliance check.
#                     - Mention a few key document examples from the provided list to give context about what was checked.
#                     - Use professional and reassuring language.""",
#         input_schema=DocumentContent,
#         output_schema=FlowOutput,
#     )
#     # create a branch

#     aflow.sequence(START, get_compliance_plan_agent,retrieve_shipment_data_agent, END)
    
#     return aflow
# from ibm_watsonx_orchestrate.flow_builder.flows import (
#     Flow, flow, START, END, Branch
# )
# from pydantic import BaseModel, Field
# from typing import List
# # --- 1. Data Model Definitions (Input/Output for each Agent) ---
# class FlowInput(BaseModel):
#     """Initial input from the user to start the flow."""
#     query: str = Field(description="User query")
# class FlowOutput(BaseModel):
#     """Final output to be provided to the user."""
#     compliance_summary: str = Field(description="A summary of the compliance check results in easy-to-understand language.")
# class CompliancePlan(BaseModel):
#     """Output from the planner agent: a list of mandatory documents."""
#     plan: str = Field(description="A string containing a checklist of all documents required for compliance.")
# class DocumentContent(BaseModel):
#     """Output from the retriever agent: data/documents that were successfully found."""
#     documents: str = Field(description="All data and text from the documents found by tool calling.")
# class ComplianceCheckInput(BaseModel):
#     """Combined input required by the checker agent."""
#     plan: str = Field(description="The checklist of mandatory documents.")
#     documents: str = Field(description="The documents that were successfully found.")
#     shipment_id: str = Field(description="The ID of the shipment being checked.")
# class ComplianceCheckResult(BaseModel):
#     """Structured output from the checker agent."""
#     is_compliant: bool = Field(description="Returns 'true' if all documents are complete, otherwise 'false'.")
#     missing_documents: List[str] = Field(description="A list of mandatory documents that were not found.")
#     status_summary: str = Field(description="A technical summary of the compliance status.")
# # --- 2. Main Flow Definition ---
# @flow(
#     name="check_compliance_flow_Bisma",
#     input_schema=FlowInput,
#     output_schema=FlowOutput
# )
# def check_compliance_flow(aflow: Flow) -> Flow:
#     """
#     Flow ini mengorkestrasi beberapa agen untuk melakukan pemeriksaan kepatuhan dokumen ekspor secara lengkap.
#     """
#     # Deskripsi Alur Kerja:
#     # 1. Agen Planner: Menghasilkan checklist dokumen standar yang wajib ada.
#     # 2. Agen Retriever: Mengambil semua data dokumen yang ada untuk shipment_id yang diberikan.
#     # 3. Agen Checker: Membandingkan data yang ada dengan checklist, lalu memberikan hasil terstruktur.
#     # 4. Agen Summarizer: Mengambil hasil terstruktur dan membuat ringkasan akhir untuk pengguna.
#     #
#     # Catatan: Logika iterasi (perulangan) untuk mengambil data yang hilang akan diatur
#     # di dalam 'instructions' agen orkestrator utama yang memanggil flow ini.
#     # Flow ini merepresentasikan satu siklus pengecekan.
#     # --- 3. Definisi Panggilan ke Setiap Agen ---
#     # Agen untuk membuat rencana/checklist kepatuhan
#     get_compliance_plan_agent = aflow.agent(
#         name="Compliance_Plan_Generator_Agent",
#         agent="Compliance_Plan_Generator_Agent", # Nama agen yang didefinisikan di file .yaml
#         description="A specialized agent that provides a procedure to check compliance.",
#         message="Generate procedure or step by step process to ensure that statement given by user is comply with the requirement or existing policy. Provide required documents and what contents that needed to perform compliance assessment. Output this list clearly. Do not add any other information or perform any other tasks.",
#         output_schema=CompliancePlan,
#     )
#     # Agen untuk mengambil data dari sistem berdasarkan ID pengiriman
#     retrieve_shipment_data_agent = aflow.agent(
#         name="AgentContract_RD_9820Yw",
#         agent="AgentContract_RD_9820Yw",
#         description="""This agent answers questions about whether specific clauses, terms,
#         or whole contracts comply with internal policy, industry standards, and relevant
#         regulations.
#         """,
#         message="""You will search required documents or its contents based on procedure generated by previous agent""",
#         input_schema=CompliancePlan,
#         output_schema=DocumentContent,
#     )
#     # Agen untuk melakukan pengecekan (membandingkan rencana dengan data)
#     check_compliance_agent = aflow.agent(
#         name="compliance_Checker_Agent",
#         agent="compliance_Checker_Agent",
#         description="A specialized agent that checks all references needed to perform compliance assessment.",
#         message="""You will be given with procedure and references.
#         Your task is to answer with Complete or Incomplete based on procedure and reference given.
#         ## Example:
#         ### You are given with this procedure:
#         - Check certificate of origin
#         - Check if certificate of origin stating Bank Name, and Bank Address
#         ### References:
#         - Certificate of Analysis
#         ### Answer: Incomplete, because certificate of origin is missing.""",
#         input_schema=ComplianceCheckInput,
#         output_schema=ComplianceCheckResult,
#     )
#     # Agen terakhir untuk membuat ringkasan akhir bagi pengguna
#     summarize_result_agent = aflow.agent(
#         name="compliance_Finish_Agent",
#         agent="compliance_Finish_Agent", # Bisa menggunakan agen utama sebagai 'summarizer' cerdas
#         description="A compliance assistant tasked with providing a final compliance assessment based on the provided compliance plan and available documents.",
#         message="""Create a clear and positive summary message. The message must:
#                     - State clearly that the Document has successfully passed the compliance check.
#                     - Mention a few key document examples from the provided list to give context about what was checked.
#                     - Use professional and reassuring language.""",
#         input_schema=DocumentContent,
#         output_schema=FlowOutput,
#     )
#     # create a branch

#     aflow.sequence(START, get_compliance_plan_agent,retrieve_shipment_data_agent, END)
    
#     return aflow

from ibm_watsonx_orchestrate.flow_builder.flows import (
    Flow, flow, START, END, Branch
)
from pydantic import BaseModel, Field
from typing import List

# --- 1. Data Model Definitions (Input/Output for each Agent) ---
class FlowInput(BaseModel):
    """Initial input from the user to start the flow."""
    query: str = Field(description="User query, e.g., 'Check compliance for commercial invoice'.")

class FlowOutput(BaseModel):
    """Final output to be provided to the user."""
    # Since the flow ends after retrieving documents, the output will reflect that.
    # It won't be a full compliance summary if the check and summary agents aren't run.
    summary: str = Field(description="Final answer of compliance assessment")

class CompliancePlan(BaseModel):
    """Output from the planner agent: a list of mandatory documents. or plan how to check the documents with the reason of it."""
    plan: str = Field(description="A string containing a checklist of all documents required for compliance.")

class DocumentContent(BaseModel):
    """Output from the retriever agent: data/documents that were successfully found."""
    documents: str = Field(description="All data and text from the documents found by tool calling.")

# These models are still defined but will not be used in the current sequence
class ComplianceCheckInput(BaseModel):
    """Combined input required by the checker agent."""
    plan: str = Field(description="The checklist of mandatory documents.")
    
class ComplianceCheckResult(BaseModel):
    """Structured output from the checker agent."""
    is_compliant: bool = Field(description="Returns 'true' if all documents are complete, otherwise 'false'.")
    missing_documents: List[str] = Field(description="A list of mandatory documents that were not found.")
    status_summary: str = Field(description="A technical summary of the compliance status.")

# --- 2. Main Flow Definition ---
@flow(
    name="check_compliance_flow_Bisma",
    input_schema=FlowInput,
    output_schema=FlowOutput
)
def check_compliance_flow(aflow: Flow) -> Flow:
    """
    Flow ini mengorkestrasi agen untuk menghasilkan rencana kepatuhan dan mengambil dokumen.
    Pengecekan dan ringkasan kepatuhan tidak termasuk dalam alur ini sesuai permintaan.
    """
    # --- 3. Definisi Panggilan ke Setiap Agen ---
    # Agen untuk membuat rencana/checklist kepatuhan
    get_compliance_plan_agent = aflow.agent(
        name="Compliance_Plan_Generator_Agent",
        agent="Compliance_Plan_Generator_Agent",
        description="A specialized agent that provides a procedure to check compliance.",
        message="Generate a detailed, step-by-step checklist of all documents and their required contents for export compliance based on the user's query. Output ONLY the checklist as a plain string, without any additional introductory or concluding remarks.",
        output_schema=CompliancePlan,
        input_schema=FlowInput, # This agent needs the plan as input
    )

    # Agen untuk mengambil data dari sistem berdasarkan ID pengiriman
    retrieve_shipment_data_agent = aflow.agent(
        name="AgentContract_RD_9820Yw",
        agent="AgentContract_RD_9820Yw",
        description="This agent retrieves all available documents for a given shipment ID based on the required document plan.",
        message="Based on the compliance plan provided: {plan}, retrieve all available documents for shipment ID: {shipment_id}. Summarize the content of the retrieved documents.",
        input_schema=CompliancePlan, # This agent needs the plan as input
        output_schema=FlowOutput,
    )


    # summarize_result_agent = aflow.agent(
    #     name="compliance_Finish_Agent",
    #     agent="compliance_Finish_Agent",
    #     description="A compliance assistant that creates a final, user-friendly summary of the compliance check.",
    #     message="Based on the structured compliance check result, create a clear summary for the user.",
    #     input_schema=DocumentContent,
    #     output_schema=FlowOutput,
    # )

    # --- 4. Flow Sequence Definition ---
    # Keeping the sequence as requested: START -> Planner -> Retriever -> END
    aflow.sequence(START, get_compliance_plan_agent, retrieve_shipment_data_agent, END)


    return aflow